<?php
/**
 * Group
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Group implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'roles' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'roles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'roles' => 'roles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'roles' => 'setRoles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'roles' => 'getRoles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROLES_AB_TEST_MANAGER = 'AbTestManager';
    const ROLES_AFTER_SEARCH_NAVIGATION_MANAGER = 'AfterSearchNavigationManager';
    const ROLES_BACKUP_MANAGER = 'BackupManager';
    const ROLES_CACHE_MANAGER = 'CacheManager';
    const ROLES_CAMPAIGN_MANAGER = 'CampaignManager';
    const ROLES_CONFIGURATOR_MANAGER = 'ConfiguratorManager';
    const ROLES_DEPLOYMENT_MANAGER = 'DeploymentManager';
    const ROLES_IMPORT_MANAGER = 'ImportManager';
    const ROLES_INTERMEDIATE_ONLY_IMPORT_MANAGER = 'IntermediateOnlyImportManager';
    const ROLES_INSTALL_MANAGER = 'InstallManager';
    const ROLES_LANGUAGE_MANAGER = 'LanguageManager';
    const ROLES_LOGFILE_ANALYZER_MANAGER = 'LogfileAnalyzerManager';
    const ROLES_MAY_CHANGE_PASSWORD = 'MayChangePassword';
    const ROLES_MESSAGES_MANAGER = 'MessagesManager';
    const ROLES_NOTIFICATION_MANAGER = 'NotificationManager';
    const ROLES_PREPROCESSOR_MANAGER = 'PreprocessorManager';
    const ROLES_RANKING_MANAGER = 'RankingManager';
    const ROLES_RECOMMENDATION_ENGINE_MANAGER = 'RecommendationEngineManager';
    const ROLES_SEARCH_INTERFACE_USER = 'SearchInterfaceUser';
    const ROLES_SEARCH_MANAGER = 'SearchManager';
    const ROLES_SHOW_HELP_SECTION = 'ShowHelpSection';
    const ROLES_SUGGEST_MANAGER = 'SuggestManager';
    const ROLES_THESAURUS_MANAGER = 'ThesaurusManager';
    const ROLES_USER_MANAGER = 'UserManager';
    const ROLES_WORD_VALUES_MANAGER = 'WordValuesManager';
    const ROLES_API_IMPORT = 'ApiImport';
    const ROLES_API_ANALYTICS = 'ApiAnalytics';
    const ROLES_API_PUBLIC_QUERIES = 'ApiPublicQueries';
    const ROLES_API_CONFIG = 'ApiConfig';
    const ROLES_API_JOBS = 'ApiJobs';
    const ROLES_API_DATABASE = 'ApiDatabase';
    const ROLES_API_MONITOR = 'ApiMonitor';
    const ROLES_API_MANAGE = 'ApiManage';
    const ROLES_API_USERS = 'ApiUsers';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRolesAllowableValues()
    {
        return [
            self::ROLES_AB_TEST_MANAGER
            self::ROLES_AFTER_SEARCH_NAVIGATION_MANAGER
            self::ROLES_BACKUP_MANAGER
            self::ROLES_CACHE_MANAGER
            self::ROLES_CAMPAIGN_MANAGER
            self::ROLES_CONFIGURATOR_MANAGER
            self::ROLES_DEPLOYMENT_MANAGER
            self::ROLES_IMPORT_MANAGER
            self::ROLES_INTERMEDIATE_ONLY_IMPORT_MANAGER
            self::ROLES_INSTALL_MANAGER
            self::ROLES_LANGUAGE_MANAGER
            self::ROLES_LOGFILE_ANALYZER_MANAGER
            self::ROLES_MAY_CHANGE_PASSWORD
            self::ROLES_MESSAGES_MANAGER
            self::ROLES_NOTIFICATION_MANAGER
            self::ROLES_PREPROCESSOR_MANAGER
            self::ROLES_RANKING_MANAGER
            self::ROLES_RECOMMENDATION_ENGINE_MANAGER
            self::ROLES_SEARCH_INTERFACE_USER
            self::ROLES_SEARCH_MANAGER
            self::ROLES_SHOW_HELP_SECTION
            self::ROLES_SUGGEST_MANAGER
            self::ROLES_THESAURUS_MANAGER
            self::ROLES_USER_MANAGER
            self::ROLES_WORD_VALUES_MANAGER
            self::ROLES_API_IMPORT
            self::ROLES_API_ANALYTICS
            self::ROLES_API_PUBLIC_QUERIES
            self::ROLES_API_CONFIG
            self::ROLES_API_JOBS
            self::ROLES_API_DATABASE
            self::ROLES_API_MONITOR
            self::ROLES_API_MANAGE
            self::ROLES_API_USERS
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the group.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[] $roles The roles that will be assigned to the users who are part of this group.
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $allowedValues = $this->getRolesAllowableValues();
        if (array_diff($roles, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'roles', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['roles'] = $roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
