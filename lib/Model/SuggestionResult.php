<?php
/**
 * SuggestionResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SuggestionResult Class Doc Comment
 *
 * @category Class
 * @description Contains a list of suggestions, the field role to field name mapping and the information if an article number search is possible.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuggestionResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SuggestionResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'article_number_search_allowed' => 'bool',
        'field_roles' => 'map[string,string]',
        'geo' => '\Swagger\Client\Model\Geo',
        'split_documents' => 'bool',
        'suggestions' => '\Swagger\Client\Model\ResultSuggestion[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'article_number_search_allowed' => null,
        'field_roles' => null,
        'geo' => null,
        'split_documents' => null,
        'suggestions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'article_number_search_allowed' => 'articleNumberSearchAllowed',
        'field_roles' => 'fieldRoles',
        'geo' => 'geo',
        'split_documents' => 'splitDocuments',
        'suggestions' => 'suggestions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'article_number_search_allowed' => 'setArticleNumberSearchAllowed',
        'field_roles' => 'setFieldRoles',
        'geo' => 'setGeo',
        'split_documents' => 'setSplitDocuments',
        'suggestions' => 'setSuggestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'article_number_search_allowed' => 'getArticleNumberSearchAllowed',
        'field_roles' => 'getFieldRoles',
        'geo' => 'getGeo',
        'split_documents' => 'getSplitDocuments',
        'suggestions' => 'getSuggestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['article_number_search_allowed'] = isset($data['article_number_search_allowed']) ? $data['article_number_search_allowed'] : null;
        $this->container['field_roles'] = isset($data['field_roles']) ? $data['field_roles'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['split_documents'] = isset($data['split_documents']) ? $data['split_documents'] : null;
        $this->container['suggestions'] = isset($data['suggestions']) ? $data['suggestions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['article_number_search_allowed'] === null) {
            $invalidProperties[] = "'article_number_search_allowed' can't be null";
        }
        if ($this->container['field_roles'] === null) {
            $invalidProperties[] = "'field_roles' can't be null";
        }
        if ($this->container['suggestions'] === null) {
            $invalidProperties[] = "'suggestions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets article_number_search_allowed
     *
     * @return bool
     */
    public function getArticleNumberSearchAllowed()
    {
        return $this->container['article_number_search_allowed'];
    }

    /**
     * Sets article_number_search_allowed
     *
     * @param bool $article_number_search_allowed True, if the field with 'productNumber' field role provides a regex pattern.
     *
     * @return $this
     */
    public function setArticleNumberSearchAllowed($article_number_search_allowed)
    {
        $this->container['article_number_search_allowed'] = $article_number_search_allowed;

        return $this;
    }

    /**
     * Gets field_roles
     *
     * @return map[string,string]
     */
    public function getFieldRoles()
    {
        return $this->container['field_roles'];
    }

    /**
     * Sets field_roles
     *
     * @param map[string,string] $field_roles A field to role mapping. For example, a field role may be 'brand', meaning that the field contains the manufacturer's name. (key = field role, value = field name)
     *
     * @return $this
     */
    public function setFieldRoles($field_roles)
    {
        $this->container['field_roles'] = $field_roles;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \Swagger\Client\Model\Geo
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \Swagger\Client\Model\Geo $geo geo
     *
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets split_documents
     *
     * @return bool
     */
    public function getSplitDocuments()
    {
        return $this->container['split_documents'];
    }

    /**
     * Sets split_documents
     *
     * @param bool $split_documents Indicator for document into variant splitting.
     *
     * @return $this
     */
    public function setSplitDocuments($split_documents)
    {
        $this->container['split_documents'] = $split_documents;

        return $this;
    }

    /**
     * Gets suggestions
     *
     * @return \Swagger\Client\Model\ResultSuggestion[]
     */
    public function getSuggestions()
    {
        return $this->container['suggestions'];
    }

    /**
     * Sets suggestions
     *
     * @param \Swagger\Client\Model\ResultSuggestion[] $suggestions The requested suggestions.
     *
     * @return $this
     */
    public function setSuggestions($suggestions)
    {
        $this->container['suggestions'] = $suggestions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
