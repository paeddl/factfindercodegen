<?php
/**
 * SuggestParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SuggestParams Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SuggestParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SuggestParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_ab_tests' => 'map[string,string]',
        'advisor_status' => '\Swagger\Client\Model\AdvisorCampaignStatusHolder',
        'article_number_search' => 'string',
        'custom_parameters' => '\Swagger\Client\Model\CustomParameter[]',
        'exclude_products_not_in_range' => 'bool',
        'filters' => '\Swagger\Client\Model\Filter[]',
        'follow_search' => 'string',
        'hits_per_page' => 'int',
        'location' => '\Swagger\Client\Model\Location',
        'market_ids' => 'string[]',
        'max_count_variants' => 'int',
        'max_distance' => 'double',
        'page' => 'int',
        'purchaser_id' => 'string',
        'query' => 'string',
        'search_field' => 'string',
        'sid' => 'string',
        'sort_items' => '\Swagger\Client\Model\SortItem[]',
        'split_documents_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_ab_tests' => null,
        'advisor_status' => null,
        'article_number_search' => null,
        'custom_parameters' => null,
        'exclude_products_not_in_range' => null,
        'filters' => null,
        'follow_search' => null,
        'hits_per_page' => 'int32',
        'location' => null,
        'market_ids' => null,
        'max_count_variants' => 'int32',
        'max_distance' => 'double',
        'page' => 'int32',
        'purchaser_id' => null,
        'query' => null,
        'search_field' => null,
        'sid' => null,
        'sort_items' => null,
        'split_documents_at' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_ab_tests' => 'activeAbTests',
        'advisor_status' => 'advisorStatus',
        'article_number_search' => 'articleNumberSearch',
        'custom_parameters' => 'customParameters',
        'exclude_products_not_in_range' => 'excludeProductsNotInRange',
        'filters' => 'filters',
        'follow_search' => 'followSearch',
        'hits_per_page' => 'hitsPerPage',
        'location' => 'location',
        'market_ids' => 'marketIds',
        'max_count_variants' => 'maxCountVariants',
        'max_distance' => 'maxDistance',
        'page' => 'page',
        'purchaser_id' => 'purchaserId',
        'query' => 'query',
        'search_field' => 'searchField',
        'sid' => 'sid',
        'sort_items' => 'sortItems',
        'split_documents_at' => 'splitDocumentsAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_ab_tests' => 'setActiveAbTests',
        'advisor_status' => 'setAdvisorStatus',
        'article_number_search' => 'setArticleNumberSearch',
        'custom_parameters' => 'setCustomParameters',
        'exclude_products_not_in_range' => 'setExcludeProductsNotInRange',
        'filters' => 'setFilters',
        'follow_search' => 'setFollowSearch',
        'hits_per_page' => 'setHitsPerPage',
        'location' => 'setLocation',
        'market_ids' => 'setMarketIds',
        'max_count_variants' => 'setMaxCountVariants',
        'max_distance' => 'setMaxDistance',
        'page' => 'setPage',
        'purchaser_id' => 'setPurchaserId',
        'query' => 'setQuery',
        'search_field' => 'setSearchField',
        'sid' => 'setSid',
        'sort_items' => 'setSortItems',
        'split_documents_at' => 'setSplitDocumentsAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_ab_tests' => 'getActiveAbTests',
        'advisor_status' => 'getAdvisorStatus',
        'article_number_search' => 'getArticleNumberSearch',
        'custom_parameters' => 'getCustomParameters',
        'exclude_products_not_in_range' => 'getExcludeProductsNotInRange',
        'filters' => 'getFilters',
        'follow_search' => 'getFollowSearch',
        'hits_per_page' => 'getHitsPerPage',
        'location' => 'getLocation',
        'market_ids' => 'getMarketIds',
        'max_count_variants' => 'getMaxCountVariants',
        'max_distance' => 'getMaxDistance',
        'page' => 'getPage',
        'purchaser_id' => 'getPurchaserId',
        'query' => 'getQuery',
        'search_field' => 'getSearchField',
        'sid' => 'getSid',
        'sort_items' => 'getSortItems',
        'split_documents_at' => 'getSplitDocumentsAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ARTICLE_NUMBER_SEARCH_DETECT = 'DETECT';
    const ARTICLE_NUMBER_SEARCH_ALWAYS = 'ALWAYS';
    const ARTICLE_NUMBER_SEARCH_NEVER = 'NEVER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArticleNumberSearchAllowableValues()
    {
        return [
            self::ARTICLE_NUMBER_SEARCH_DETECT,
            self::ARTICLE_NUMBER_SEARCH_ALWAYS,
            self::ARTICLE_NUMBER_SEARCH_NEVER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_ab_tests'] = isset($data['active_ab_tests']) ? $data['active_ab_tests'] : null;
        $this->container['advisor_status'] = isset($data['advisor_status']) ? $data['advisor_status'] : null;
        $this->container['article_number_search'] = isset($data['article_number_search']) ? $data['article_number_search'] : null;
        $this->container['custom_parameters'] = isset($data['custom_parameters']) ? $data['custom_parameters'] : null;
        $this->container['exclude_products_not_in_range'] = isset($data['exclude_products_not_in_range']) ? $data['exclude_products_not_in_range'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['follow_search'] = isset($data['follow_search']) ? $data['follow_search'] : null;
        $this->container['hits_per_page'] = isset($data['hits_per_page']) ? $data['hits_per_page'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['market_ids'] = isset($data['market_ids']) ? $data['market_ids'] : null;
        $this->container['max_count_variants'] = isset($data['max_count_variants']) ? $data['max_count_variants'] : null;
        $this->container['max_distance'] = isset($data['max_distance']) ? $data['max_distance'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['purchaser_id'] = isset($data['purchaser_id']) ? $data['purchaser_id'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['search_field'] = isset($data['search_field']) ? $data['search_field'] : null;
        $this->container['sid'] = isset($data['sid']) ? $data['sid'] : null;
        $this->container['sort_items'] = isset($data['sort_items']) ? $data['sort_items'] : null;
        $this->container['split_documents_at'] = isset($data['split_documents_at']) ? $data['split_documents_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getArticleNumberSearchAllowableValues();
        if (!is_null($this->container['article_number_search']) && !in_array($this->container['article_number_search'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'article_number_search', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_ab_tests
     *
     * @return map[string,string]
     */
    public function getActiveAbTests()
    {
        return $this->container['active_ab_tests'];
    }

    /**
     * Sets active_ab_tests
     *
     * @param map[string,string] $active_ab_tests The active ab tests variants.
     *
     * @return $this
     */
    public function setActiveAbTests($active_ab_tests)
    {
        $this->container['active_ab_tests'] = $active_ab_tests;

        return $this;
    }

    /**
     * Gets advisor_status
     *
     * @return \Swagger\Client\Model\AdvisorCampaignStatusHolder
     */
    public function getAdvisorStatus()
    {
        return $this->container['advisor_status'];
    }

    /**
     * Sets advisor_status
     *
     * @param \Swagger\Client\Model\AdvisorCampaignStatusHolder $advisor_status advisor_status
     *
     * @return $this
     */
    public function setAdvisorStatus($advisor_status)
    {
        $this->container['advisor_status'] = $advisor_status;

        return $this;
    }

    /**
     * Gets article_number_search
     *
     * @return string
     */
    public function getArticleNumberSearch()
    {
        return $this->container['article_number_search'];
    }

    /**
     * Sets article_number_search
     *
     * @param string $article_number_search Specifies if the search term should be interpreted as article number.
     *
     * @return $this
     */
    public function setArticleNumberSearch($article_number_search)
    {
        $allowedValues = $this->getArticleNumberSearchAllowableValues();
        if (!is_null($article_number_search) && !in_array($article_number_search, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'article_number_search', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['article_number_search'] = $article_number_search;

        return $this;
    }

    /**
     * Gets custom_parameters
     *
     * @return \Swagger\Client\Model\CustomParameter[]
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * Sets custom_parameters
     *
     * @param \Swagger\Client\Model\CustomParameter[] $custom_parameters May be used to provide custom parameters, such as for custom classes.
     *
     * @return $this
     */
    public function setCustomParameters($custom_parameters)
    {
        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * Gets exclude_products_not_in_range
     *
     * @return bool
     */
    public function getExcludeProductsNotInRange()
    {
        return $this->container['exclude_products_not_in_range'];
    }

    /**
     * Sets exclude_products_not_in_range
     *
     * @param bool $exclude_products_not_in_range Overrides the excludeProductsNotInRange setting for the geo search.
     *
     * @return $this
     */
    public function setExcludeProductsNotInRange($exclude_products_not_in_range)
    {
        $this->container['exclude_products_not_in_range'] = $exclude_products_not_in_range;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Swagger\Client\Model\Filter[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Swagger\Client\Model\Filter[] $filters The filters to limit the search result.
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets follow_search
     *
     * @return string
     */
    public function getFollowSearch()
    {
        return $this->container['follow_search'];
    }

    /**
     * Sets follow_search
     *
     * @param string $follow_search Optional request linking param from a previous search result or search param object. Can improve request performance.
     *
     * @return $this
     */
    public function setFollowSearch($follow_search)
    {
        $this->container['follow_search'] = $follow_search;

        return $this;
    }

    /**
     * Gets hits_per_page
     *
     * @return int
     */
    public function getHitsPerPage()
    {
        return $this->container['hits_per_page'];
    }

    /**
     * Sets hits_per_page
     *
     * @param int $hits_per_page Number of products on a single page.
     *
     * @return $this
     */
    public function setHitsPerPage($hits_per_page)
    {
        $this->container['hits_per_page'] = $hits_per_page;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets market_ids
     *
     * @return string[]
     */
    public function getMarketIds()
    {
        return $this->container['market_ids'];
    }

    /**
     * Sets market_ids
     *
     * @param string[] $market_ids Only show products that have values for these market IDs.
     *
     * @return $this
     */
    public function setMarketIds($market_ids)
    {
        $this->container['market_ids'] = $market_ids;

        return $this;
    }

    /**
     * Gets max_count_variants
     *
     * @return int
     */
    public function getMaxCountVariants()
    {
        return $this->container['max_count_variants'];
    }

    /**
     * Sets max_count_variants
     *
     * @param int $max_count_variants Defines the maximum number of variants to be returned in the result.
     *
     * @return $this
     */
    public function setMaxCountVariants($max_count_variants)
    {
        $this->container['max_count_variants'] = $max_count_variants;

        return $this;
    }

    /**
     * Gets max_distance
     *
     * @return double
     */
    public function getMaxDistance()
    {
        return $this->container['max_distance'];
    }

    /**
     * Sets max_distance
     *
     * @param double $max_distance Overrides the maximum distance setting for the geo search.
     *
     * @return $this
     */
    public function setMaxDistance($max_distance)
    {
        $this->container['max_distance'] = $max_distance;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page The page to be requested within the search result.
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets purchaser_id
     *
     * @return string
     */
    public function getPurchaserId()
    {
        return $this->container['purchaser_id'];
    }

    /**
     * Sets purchaser_id
     *
     * @param string $purchaser_id The ID of the purchaser. This ID is only needed if the 'customer specific pricing' module is activated. Otherwise it will be ignored.
     *
     * @return $this
     */
    public function setPurchaserId($purchaser_id)
    {
        $this->container['purchaser_id'] = $purchaser_id;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query The search term.
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets search_field
     *
     * @return string
     */
    public function getSearchField()
    {
        return $this->container['search_field'];
    }

    /**
     * Sets search_field
     *
     * @param string $search_field If set, the search term will be looked for only in the given field. Otherwise all searchable fields will be considered (for article number searches, all fields marked as containing article numbers).
     *
     * @return $this
     */
    public function setSearchField($search_field)
    {
        $this->container['search_field'] = $search_field;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return string
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string $sid The session id. Required for A/B testing.
     *
     * @return $this
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets sort_items
     *
     * @return \Swagger\Client\Model\SortItem[]
     */
    public function getSortItems()
    {
        return $this->container['sort_items'];
    }

    /**
     * Sets sort_items
     *
     * @param \Swagger\Client\Model\SortItem[] $sort_items Specifies the sort order for the search result.
     *
     * @return $this
     */
    public function setSortItems($sort_items)
    {
        $this->container['sort_items'] = $sort_items;

        return $this;
    }

    /**
     * Gets split_documents_at
     *
     * @return int
     */
    public function getSplitDocumentsAt()
    {
        return $this->container['split_documents_at'];
    }

    /**
     * Sets split_documents_at
     *
     * @param int $split_documents_at Threshold for variant splitting of documents.
     *
     * @return $this
     */
    public function setSplitDocumentsAt($split_documents_at)
    {
        $this->container['split_documents_at'] = $split_documents_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
