<?php
/**
 * ImportChannelResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImportChannelResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportChannelResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImportChannelResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'channel' => 'string',
        'duration_in_seconds' => 'int',
        'error_messages' => 'string[]',
        'import_type' => 'string',
        'imported_fields' => 'int',
        'imported_records' => 'int',
        'imported_worldmatch_documents' => 'int',
        'start_date' => '\DateTime',
        'status_messages' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'channel' => null,
        'duration_in_seconds' => 'int64',
        'error_messages' => null,
        'import_type' => null,
        'imported_fields' => 'int32',
        'imported_records' => 'int32',
        'imported_worldmatch_documents' => 'int32',
        'start_date' => 'date-time',
        'status_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'duration_in_seconds' => 'durationInSeconds',
        'error_messages' => 'errorMessages',
        'import_type' => 'importType',
        'imported_fields' => 'importedFields',
        'imported_records' => 'importedRecords',
        'imported_worldmatch_documents' => 'importedWorldmatchDocuments',
        'start_date' => 'startDate',
        'status_messages' => 'statusMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'duration_in_seconds' => 'setDurationInSeconds',
        'error_messages' => 'setErrorMessages',
        'import_type' => 'setImportType',
        'imported_fields' => 'setImportedFields',
        'imported_records' => 'setImportedRecords',
        'imported_worldmatch_documents' => 'setImportedWorldmatchDocuments',
        'start_date' => 'setStartDate',
        'status_messages' => 'setStatusMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'duration_in_seconds' => 'getDurationInSeconds',
        'error_messages' => 'getErrorMessages',
        'import_type' => 'getImportType',
        'imported_fields' => 'getImportedFields',
        'imported_records' => 'getImportedRecords',
        'imported_worldmatch_documents' => 'getImportedWorldmatchDocuments',
        'start_date' => 'getStartDate',
        'status_messages' => 'getStatusMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const IMPORT_TYPE_DATA = 'DATA';
    const IMPORT_TYPE_SUGGEST = 'SUGGEST';
    const IMPORT_TYPE_RECOMMENDATION = 'RECOMMENDATION';
    const IMPORT_TYPE_RANKING = 'RANKING';
    const IMPORT_TYPE_CUSTOMER_SPECIFIC_PRICING = 'CUSTOMER_SPECIFIC_PRICING';
    const IMPORT_TYPE_GEO = 'GEO';
    const IMPORT_TYPE_DATA_AND_PRICING = 'DATA_AND_PRICING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImportTypeAllowableValues()
    {
        return [
            self::IMPORT_TYPE_DATA,
            self::IMPORT_TYPE_SUGGEST,
            self::IMPORT_TYPE_RECOMMENDATION,
            self::IMPORT_TYPE_RANKING,
            self::IMPORT_TYPE_CUSTOMER_SPECIFIC_PRICING,
            self::IMPORT_TYPE_GEO,
            self::IMPORT_TYPE_DATA_AND_PRICING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['duration_in_seconds'] = isset($data['duration_in_seconds']) ? $data['duration_in_seconds'] : null;
        $this->container['error_messages'] = isset($data['error_messages']) ? $data['error_messages'] : null;
        $this->container['import_type'] = isset($data['import_type']) ? $data['import_type'] : null;
        $this->container['imported_fields'] = isset($data['imported_fields']) ? $data['imported_fields'] : null;
        $this->container['imported_records'] = isset($data['imported_records']) ? $data['imported_records'] : null;
        $this->container['imported_worldmatch_documents'] = isset($data['imported_worldmatch_documents']) ? $data['imported_worldmatch_documents'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['status_messages'] = isset($data['status_messages']) ? $data['status_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['duration_in_seconds'] === null) {
            $invalidProperties[] = "'duration_in_seconds' can't be null";
        }
        if ($this->container['error_messages'] === null) {
            $invalidProperties[] = "'error_messages' can't be null";
        }
        if ($this->container['import_type'] === null) {
            $invalidProperties[] = "'import_type' can't be null";
        }
        $allowedValues = $this->getImportTypeAllowableValues();
        if (!is_null($this->container['import_type']) && !in_array($this->container['import_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'import_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['imported_fields'] === null) {
            $invalidProperties[] = "'imported_fields' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['status_messages'] === null) {
            $invalidProperties[] = "'status_messages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel The channel for which the import was performed.
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets duration_in_seconds
     *
     * @return int
     */
    public function getDurationInSeconds()
    {
        return $this->container['duration_in_seconds'];
    }

    /**
     * Sets duration_in_seconds
     *
     * @param int $duration_in_seconds The duration of the import process (seconds).
     *
     * @return $this
     */
    public function setDurationInSeconds($duration_in_seconds)
    {
        $this->container['duration_in_seconds'] = $duration_in_seconds;

        return $this;
    }

    /**
     * Gets error_messages
     *
     * @return string[]
     */
    public function getErrorMessages()
    {
        return $this->container['error_messages'];
    }

    /**
     * Sets error_messages
     *
     * @param string[] $error_messages Import error messages.
     *
     * @return $this
     */
    public function setErrorMessages($error_messages)
    {
        $this->container['error_messages'] = $error_messages;

        return $this;
    }

    /**
     * Gets import_type
     *
     * @return string
     */
    public function getImportType()
    {
        return $this->container['import_type'];
    }

    /**
     * Sets import_type
     *
     * @param string $import_type The type of data imported.
     *
     * @return $this
     */
    public function setImportType($import_type)
    {
        $allowedValues = $this->getImportTypeAllowableValues();
        if (!in_array($import_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'import_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['import_type'] = $import_type;

        return $this;
    }

    /**
     * Gets imported_fields
     *
     * @return int
     */
    public function getImportedFields()
    {
        return $this->container['imported_fields'];
    }

    /**
     * Sets imported_fields
     *
     * @param int $imported_fields The number of fields imported.
     *
     * @return $this
     */
    public function setImportedFields($imported_fields)
    {
        $this->container['imported_fields'] = $imported_fields;

        return $this;
    }

    /**
     * Gets imported_records
     *
     * @return int
     */
    public function getImportedRecords()
    {
        return $this->container['imported_records'];
    }

    /**
     * Sets imported_records
     *
     * @param int $imported_records The number of records imported.
     *
     * @return $this
     */
    public function setImportedRecords($imported_records)
    {
        $this->container['imported_records'] = $imported_records;

        return $this;
    }

    /**
     * Gets imported_worldmatch_documents
     *
     * @return int
     */
    public function getImportedWorldmatchDocuments()
    {
        return $this->container['imported_worldmatch_documents'];
    }

    /**
     * Sets imported_worldmatch_documents
     *
     * @param int $imported_worldmatch_documents The number of records imported into worldmatch.
     *
     * @return $this
     */
    public function setImportedWorldmatchDocuments($imported_worldmatch_documents)
    {
        $this->container['imported_worldmatch_documents'] = $imported_worldmatch_documents;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The time and date that the import was started.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets status_messages
     *
     * @return string[]
     */
    public function getStatusMessages()
    {
        return $this->container['status_messages'];
    }

    /**
     * Sets status_messages
     *
     * @param string[] $status_messages Import status messages.
     *
     * @return $this
     */
    public function setStatusMessages($status_messages)
    {
        $this->container['status_messages'] = $status_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
