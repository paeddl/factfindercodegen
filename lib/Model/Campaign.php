<?php
/**
 * Campaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Campaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_questions' => '\Swagger\Client\Model\Question[]',
        'ad' => 'bool',
        'advisor_tree' => '\Swagger\Client\Model\Question[]',
        'category' => 'string',
        'exclude_products_not_in_markets' => 'bool',
        'exclude_products_not_in_range' => 'bool',
        'feedback_texts' => '\Swagger\Client\Model\FeedbackText[]',
        'flavour' => 'string',
        'hits' => '\Swagger\Client\Model\RecordWithId[]',
        'id' => 'string',
        'name' => 'string',
        'target' => '\Swagger\Client\Model\Target'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_questions' => null,
        'ad' => null,
        'advisor_tree' => null,
        'category' => null,
        'exclude_products_not_in_markets' => null,
        'exclude_products_not_in_range' => null,
        'feedback_texts' => null,
        'flavour' => null,
        'hits' => null,
        'id' => null,
        'name' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_questions' => 'activeQuestions',
        'ad' => 'ad',
        'advisor_tree' => 'advisorTree',
        'category' => 'category',
        'exclude_products_not_in_markets' => 'excludeProductsNotInMarkets',
        'exclude_products_not_in_range' => 'excludeProductsNotInRange',
        'feedback_texts' => 'feedbackTexts',
        'flavour' => 'flavour',
        'hits' => 'hits',
        'id' => 'id',
        'name' => 'name',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_questions' => 'setActiveQuestions',
        'ad' => 'setAd',
        'advisor_tree' => 'setAdvisorTree',
        'category' => 'setCategory',
        'exclude_products_not_in_markets' => 'setExcludeProductsNotInMarkets',
        'exclude_products_not_in_range' => 'setExcludeProductsNotInRange',
        'feedback_texts' => 'setFeedbackTexts',
        'flavour' => 'setFlavour',
        'hits' => 'setHits',
        'id' => 'setId',
        'name' => 'setName',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_questions' => 'getActiveQuestions',
        'ad' => 'getAd',
        'advisor_tree' => 'getAdvisorTree',
        'category' => 'getCategory',
        'exclude_products_not_in_markets' => 'getExcludeProductsNotInMarkets',
        'exclude_products_not_in_range' => 'getExcludeProductsNotInRange',
        'feedback_texts' => 'getFeedbackTexts',
        'flavour' => 'getFlavour',
        'hits' => 'getHits',
        'id' => 'getId',
        'name' => 'getName',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLAVOUR_ADVISOR = 'ADVISOR';
    const FLAVOUR_REDIRECT = 'REDIRECT';
    const FLAVOUR_FEEDBACK = 'FEEDBACK';
    const FLAVOUR_PRODUCT = 'PRODUCT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlavourAllowableValues()
    {
        return [
            self::FLAVOUR_ADVISOR,
            self::FLAVOUR_REDIRECT,
            self::FLAVOUR_FEEDBACK,
            self::FLAVOUR_PRODUCT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_questions'] = isset($data['active_questions']) ? $data['active_questions'] : null;
        $this->container['ad'] = isset($data['ad']) ? $data['ad'] : null;
        $this->container['advisor_tree'] = isset($data['advisor_tree']) ? $data['advisor_tree'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['exclude_products_not_in_markets'] = isset($data['exclude_products_not_in_markets']) ? $data['exclude_products_not_in_markets'] : null;
        $this->container['exclude_products_not_in_range'] = isset($data['exclude_products_not_in_range']) ? $data['exclude_products_not_in_range'] : null;
        $this->container['feedback_texts'] = isset($data['feedback_texts']) ? $data['feedback_texts'] : null;
        $this->container['flavour'] = isset($data['flavour']) ? $data['flavour'] : null;
        $this->container['hits'] = isset($data['hits']) ? $data['hits'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['advisor_tree'] === null) {
            $invalidProperties[] = "'advisor_tree' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['flavour'] === null) {
            $invalidProperties[] = "'flavour' can't be null";
        }
        $allowedValues = $this->getFlavourAllowableValues();
        if (!is_null($this->container['flavour']) && !in_array($this->container['flavour'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flavour', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_questions
     *
     * @return \Swagger\Client\Model\Question[]
     */
    public function getActiveQuestions()
    {
        return $this->container['active_questions'];
    }

    /**
     * Sets active_questions
     *
     * @param \Swagger\Client\Model\Question[] $active_questions The currently active questions to be shown to the user. These questions do not need to be the root questions, in case the user has already answered a question.
     *
     * @return $this
     */
    public function setActiveQuestions($active_questions)
    {
        $this->container['active_questions'] = $active_questions;

        return $this;
    }

    /**
     * Gets ad
     *
     * @return bool
     */
    public function getAd()
    {
        return $this->container['ad'];
    }

    /**
     * Sets ad
     *
     * @param bool $ad The setting which defines if this campaign is used as an ad.
     *
     * @return $this
     */
    public function setAd($ad)
    {
        $this->container['ad'] = $ad;

        return $this;
    }

    /**
     * Gets advisor_tree
     *
     * @return \Swagger\Client\Model\Question[]
     */
    public function getAdvisorTree()
    {
        return $this->container['advisor_tree'];
    }

    /**
     * Sets advisor_tree
     *
     * @param \Swagger\Client\Model\Question[] $advisor_tree The advisor root questions associated with this campaign.
     *
     * @return $this
     */
    public function setAdvisorTree($advisor_tree)
    {
        $this->container['advisor_tree'] = $advisor_tree;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category The category of the campaign. May be empty.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets exclude_products_not_in_markets
     *
     * @return bool
     */
    public function getExcludeProductsNotInMarkets()
    {
        return $this->container['exclude_products_not_in_markets'];
    }

    /**
     * Sets exclude_products_not_in_markets
     *
     * @param bool $exclude_products_not_in_markets The setting which decides whether pushed products should be excluded if they are not mapped to any selected market.
     *
     * @return $this
     */
    public function setExcludeProductsNotInMarkets($exclude_products_not_in_markets)
    {
        $this->container['exclude_products_not_in_markets'] = $exclude_products_not_in_markets;

        return $this;
    }

    /**
     * Gets exclude_products_not_in_range
     *
     * @return bool
     */
    public function getExcludeProductsNotInRange()
    {
        return $this->container['exclude_products_not_in_range'];
    }

    /**
     * Sets exclude_products_not_in_range
     *
     * @param bool $exclude_products_not_in_range The setting which decides whether pushed products should be excluded if they are not close enough to the search location.
     *
     * @return $this
     */
    public function setExcludeProductsNotInRange($exclude_products_not_in_range)
    {
        $this->container['exclude_products_not_in_range'] = $exclude_products_not_in_range;

        return $this;
    }

    /**
     * Gets feedback_texts
     *
     * @return \Swagger\Client\Model\FeedbackText[]
     */
    public function getFeedbackTexts()
    {
        return $this->container['feedback_texts'];
    }

    /**
     * Sets feedback_texts
     *
     * @param \Swagger\Client\Model\FeedbackText[] $feedback_texts The feedback text lines that will be displayed to the user.
     *
     * @return $this
     */
    public function setFeedbackTexts($feedback_texts)
    {
        $this->container['feedback_texts'] = $feedback_texts;

        return $this;
    }

    /**
     * Gets flavour
     *
     * @return string
     */
    public function getFlavour()
    {
        return $this->container['flavour'];
    }

    /**
     * Sets flavour
     *
     * @param string $flavour The kind of the campaign.
     *
     * @return $this
     */
    public function setFlavour($flavour)
    {
        $allowedValues = $this->getFlavourAllowableValues();
        if (!in_array($flavour, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flavour', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flavour'] = $flavour;

        return $this;
    }

    /**
     * Gets hits
     *
     * @return \Swagger\Client\Model\RecordWithId[]
     */
    public function getHits()
    {
        return $this->container['hits'];
    }

    /**
     * Sets hits
     *
     * @param \Swagger\Client\Model\RecordWithId[] $hits The records associated with the campaign, if it should push products.
     *
     * @return $this
     */
    public function setHits($hits)
    {
        $this->container['hits'] = $hits;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the campaign.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the campaign.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets target
     *
     * @return \Swagger\Client\Model\Target
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param \Swagger\Client\Model\Target $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
