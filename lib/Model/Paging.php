<?php
/**
 * Paging
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Paging Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Paging implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Paging';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_page' => 'int',
        'default_hits_per_page' => 'int',
        'hits_per_page' => 'int',
        'next_link' => '\Swagger\Client\Model\PageLink',
        'page_count' => 'int',
        'previous_link' => '\Swagger\Client\Model\PageLink'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_page' => 'int32',
        'default_hits_per_page' => 'int32',
        'hits_per_page' => 'int32',
        'next_link' => null,
        'page_count' => 'int32',
        'previous_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_page' => 'currentPage',
        'default_hits_per_page' => 'defaultHitsPerPage',
        'hits_per_page' => 'hitsPerPage',
        'next_link' => 'nextLink',
        'page_count' => 'pageCount',
        'previous_link' => 'previousLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_page' => 'setCurrentPage',
        'default_hits_per_page' => 'setDefaultHitsPerPage',
        'hits_per_page' => 'setHitsPerPage',
        'next_link' => 'setNextLink',
        'page_count' => 'setPageCount',
        'previous_link' => 'setPreviousLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_page' => 'getCurrentPage',
        'default_hits_per_page' => 'getDefaultHitsPerPage',
        'hits_per_page' => 'getHitsPerPage',
        'next_link' => 'getNextLink',
        'page_count' => 'getPageCount',
        'previous_link' => 'getPreviousLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_page'] = isset($data['current_page']) ? $data['current_page'] : null;
        $this->container['default_hits_per_page'] = isset($data['default_hits_per_page']) ? $data['default_hits_per_page'] : null;
        $this->container['hits_per_page'] = isset($data['hits_per_page']) ? $data['hits_per_page'] : null;
        $this->container['next_link'] = isset($data['next_link']) ? $data['next_link'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['previous_link'] = isset($data['previous_link']) ? $data['previous_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_page'] === null) {
            $invalidProperties[] = "'current_page' can't be null";
        }
        if ($this->container['hits_per_page'] === null) {
            $invalidProperties[] = "'hits_per_page' can't be null";
        }
        if ($this->container['page_count'] === null) {
            $invalidProperties[] = "'page_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_page
     *
     * @return int
     */
    public function getCurrentPage()
    {
        return $this->container['current_page'];
    }

    /**
     * Sets current_page
     *
     * @param int $current_page The number of the currently selected page.
     *
     * @return $this
     */
    public function setCurrentPage($current_page)
    {
        $this->container['current_page'] = $current_page;

        return $this;
    }

    /**
     * Gets default_hits_per_page
     *
     * @return int
     */
    public function getDefaultHitsPerPage()
    {
        return $this->container['default_hits_per_page'];
    }

    /**
     * Sets default_hits_per_page
     *
     * @param int $default_hits_per_page The default number of products shown per page, as defined in the configuration.
     *
     * @return $this
     */
    public function setDefaultHitsPerPage($default_hits_per_page)
    {
        $this->container['default_hits_per_page'] = $default_hits_per_page;

        return $this;
    }

    /**
     * Gets hits_per_page
     *
     * @return int
     */
    public function getHitsPerPage()
    {
        return $this->container['hits_per_page'];
    }

    /**
     * Sets hits_per_page
     *
     * @param int $hits_per_page The number of products shown per page (the last page may contain fewer products).
     *
     * @return $this
     */
    public function setHitsPerPage($hits_per_page)
    {
        $this->container['hits_per_page'] = $hits_per_page;

        return $this;
    }

    /**
     * Gets next_link
     *
     * @return \Swagger\Client\Model\PageLink
     */
    public function getNextLink()
    {
        return $this->container['next_link'];
    }

    /**
     * Sets next_link
     *
     * @param \Swagger\Client\Model\PageLink $next_link next_link
     *
     * @return $this
     */
    public function setNextLink($next_link)
    {
        $this->container['next_link'] = $next_link;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count The total number of pages for this search result.
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets previous_link
     *
     * @return \Swagger\Client\Model\PageLink
     */
    public function getPreviousLink()
    {
        return $this->container['previous_link'];
    }

    /**
     * Sets previous_link
     *
     * @param \Swagger\Client\Model\PageLink $previous_link previous_link
     *
     * @return $this
     */
    public function setPreviousLink($previous_link)
    {
        $this->container['previous_link'] = $previous_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
