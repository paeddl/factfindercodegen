<?php
/**
 * SearchControlParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchControlParams Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchControlParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchControlParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deduplication_field' => 'string',
        'ids_only' => 'bool',
        'use_ab_test' => 'bool',
        'use_asn' => 'bool',
        'use_aso' => 'bool',
        'use_cache' => 'bool',
        'use_campaigns' => 'bool',
        'use_deduplication' => 'bool',
        'use_found_words' => 'bool',
        'use_geo' => 'bool',
        'use_personalization' => 'bool',
        'use_ranking' => 'bool',
        'use_search' => 'bool',
        'use_semantic_enhancer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deduplication_field' => null,
        'ids_only' => null,
        'use_ab_test' => null,
        'use_asn' => null,
        'use_aso' => null,
        'use_cache' => null,
        'use_campaigns' => null,
        'use_deduplication' => null,
        'use_found_words' => null,
        'use_geo' => null,
        'use_personalization' => null,
        'use_ranking' => null,
        'use_search' => null,
        'use_semantic_enhancer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deduplication_field' => 'deduplicationField',
        'ids_only' => 'idsOnly',
        'use_ab_test' => 'useAbTest',
        'use_asn' => 'useAsn',
        'use_aso' => 'useAso',
        'use_cache' => 'useCache',
        'use_campaigns' => 'useCampaigns',
        'use_deduplication' => 'useDeduplication',
        'use_found_words' => 'useFoundWords',
        'use_geo' => 'useGeo',
        'use_personalization' => 'usePersonalization',
        'use_ranking' => 'useRanking',
        'use_search' => 'useSearch',
        'use_semantic_enhancer' => 'useSemanticEnhancer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deduplication_field' => 'setDeduplicationField',
        'ids_only' => 'setIdsOnly',
        'use_ab_test' => 'setUseAbTest',
        'use_asn' => 'setUseAsn',
        'use_aso' => 'setUseAso',
        'use_cache' => 'setUseCache',
        'use_campaigns' => 'setUseCampaigns',
        'use_deduplication' => 'setUseDeduplication',
        'use_found_words' => 'setUseFoundWords',
        'use_geo' => 'setUseGeo',
        'use_personalization' => 'setUsePersonalization',
        'use_ranking' => 'setUseRanking',
        'use_search' => 'setUseSearch',
        'use_semantic_enhancer' => 'setUseSemanticEnhancer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deduplication_field' => 'getDeduplicationField',
        'ids_only' => 'getIdsOnly',
        'use_ab_test' => 'getUseAbTest',
        'use_asn' => 'getUseAsn',
        'use_aso' => 'getUseAso',
        'use_cache' => 'getUseCache',
        'use_campaigns' => 'getUseCampaigns',
        'use_deduplication' => 'getUseDeduplication',
        'use_found_words' => 'getUseFoundWords',
        'use_geo' => 'getUseGeo',
        'use_personalization' => 'getUsePersonalization',
        'use_ranking' => 'getUseRanking',
        'use_search' => 'getUseSearch',
        'use_semantic_enhancer' => 'getUseSemanticEnhancer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deduplication_field'] = isset($data['deduplication_field']) ? $data['deduplication_field'] : null;
        $this->container['ids_only'] = isset($data['ids_only']) ? $data['ids_only'] : null;
        $this->container['use_ab_test'] = isset($data['use_ab_test']) ? $data['use_ab_test'] : null;
        $this->container['use_asn'] = isset($data['use_asn']) ? $data['use_asn'] : null;
        $this->container['use_aso'] = isset($data['use_aso']) ? $data['use_aso'] : null;
        $this->container['use_cache'] = isset($data['use_cache']) ? $data['use_cache'] : null;
        $this->container['use_campaigns'] = isset($data['use_campaigns']) ? $data['use_campaigns'] : null;
        $this->container['use_deduplication'] = isset($data['use_deduplication']) ? $data['use_deduplication'] : null;
        $this->container['use_found_words'] = isset($data['use_found_words']) ? $data['use_found_words'] : null;
        $this->container['use_geo'] = isset($data['use_geo']) ? $data['use_geo'] : null;
        $this->container['use_personalization'] = isset($data['use_personalization']) ? $data['use_personalization'] : null;
        $this->container['use_ranking'] = isset($data['use_ranking']) ? $data['use_ranking'] : null;
        $this->container['use_search'] = isset($data['use_search']) ? $data['use_search'] : null;
        $this->container['use_semantic_enhancer'] = isset($data['use_semantic_enhancer']) ? $data['use_semantic_enhancer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deduplication_field
     *
     * @return string
     */
    public function getDeduplicationField()
    {
        return $this->container['deduplication_field'];
    }

    /**
     * Sets deduplication_field
     *
     * @param string $deduplication_field Specifies on which field variants should be deduplicated.
     *
     * @return $this
     */
    public function setDeduplicationField($deduplication_field)
    {
        $this->container['deduplication_field'] = $deduplication_field;

        return $this;
    }

    /**
     * Gets ids_only
     *
     * @return bool
     */
    public function getIdsOnly()
    {
        return $this->container['ids_only'];
    }

    /**
     * Sets ids_only
     *
     * @param bool $ids_only If true, the returned records will contain only record IDs.
     *
     * @return $this
     */
    public function setIdsOnly($ids_only)
    {
        $this->container['ids_only'] = $ids_only;

        return $this;
    }

    /**
     * Gets use_ab_test
     *
     * @return bool
     */
    public function getUseAbTest()
    {
        return $this->container['use_ab_test'];
    }

    /**
     * Sets use_ab_test
     *
     * @param bool $use_ab_test If true abTest features will be active.
     *
     * @return $this
     */
    public function setUseAbTest($use_ab_test)
    {
        $this->container['use_ab_test'] = $use_ab_test;

        return $this;
    }

    /**
     * Gets use_asn
     *
     * @return bool
     */
    public function getUseAsn()
    {
        return $this->container['use_asn'];
    }

    /**
     * Sets use_asn
     *
     * @param bool $use_asn If true, filters should be generated for the result.
     *
     * @return $this
     */
    public function setUseAsn($use_asn)
    {
        $this->container['use_asn'] = $use_asn;

        return $this;
    }

    /**
     * Gets use_aso
     *
     * @return bool
     */
    public function getUseAso()
    {
        return $this->container['use_aso'];
    }

    /**
     * Sets use_aso
     *
     * @param bool $use_aso If true, automatic search optimization will be used.
     *
     * @return $this
     */
    public function setUseAso($use_aso)
    {
        $this->container['use_aso'] = $use_aso;

        return $this;
    }

    /**
     * Gets use_cache
     *
     * @return bool
     */
    public function getUseCache()
    {
        return $this->container['use_cache'];
    }

    /**
     * Sets use_cache
     *
     * @param bool $use_cache If true, the search result will be returned from cache memory, if a possible matching result exists.
     *
     * @return $this
     */
    public function setUseCache($use_cache)
    {
        $this->container['use_cache'] = $use_cache;

        return $this;
    }

    /**
     * Gets use_campaigns
     *
     * @return bool
     */
    public function getUseCampaigns()
    {
        return $this->container['use_campaigns'];
    }

    /**
     * Sets use_campaigns
     *
     * @param bool $use_campaigns If true, campaigns corresponding to this search result will be returned.
     *
     * @return $this
     */
    public function setUseCampaigns($use_campaigns)
    {
        $this->container['use_campaigns'] = $use_campaigns;

        return $this;
    }

    /**
     * Gets use_deduplication
     *
     * @return bool
     */
    public function getUseDeduplication()
    {
        return $this->container['use_deduplication'];
    }

    /**
     * Sets use_deduplication
     *
     * @param bool $use_deduplication If true, the configured deduplication of variants will be used.
     *
     * @return $this
     */
    public function setUseDeduplication($use_deduplication)
    {
        $this->container['use_deduplication'] = $use_deduplication;

        return $this;
    }

    /**
     * Gets use_found_words
     *
     * @return bool
     */
    public function getUseFoundWords()
    {
        return $this->container['use_found_words'];
    }

    /**
     * Sets use_found_words
     *
     * @param bool $use_found_words If true, the words that led to the records in the search results will be determined; this may require a large amount of processing time.
     *
     * @return $this
     */
    public function setUseFoundWords($use_found_words)
    {
        $this->container['use_found_words'] = $use_found_words;

        return $this;
    }

    /**
     * Gets use_geo
     *
     * @return bool
     */
    public function getUseGeo()
    {
        return $this->container['use_geo'];
    }

    /**
     * Sets use_geo
     *
     * @param bool $use_geo use_geo
     *
     * @return $this
     */
    public function setUseGeo($use_geo)
    {
        $this->container['use_geo'] = $use_geo;

        return $this;
    }

    /**
     * Gets use_personalization
     *
     * @return bool
     */
    public function getUsePersonalization()
    {
        return $this->container['use_personalization'];
    }

    /**
     * Sets use_personalization
     *
     * @param bool $use_personalization If true, the relevant products in the result will be personalized.
     *
     * @return $this
     */
    public function setUsePersonalization($use_personalization)
    {
        $this->container['use_personalization'] = $use_personalization;

        return $this;
    }

    /**
     * Gets use_ranking
     *
     * @return bool
     */
    public function getUseRanking()
    {
        return $this->container['use_ranking'];
    }

    /**
     * Sets use_ranking
     *
     * @param bool $use_ranking If true, ranking will be applied.
     *
     * @return $this
     */
    public function setUseRanking($use_ranking)
    {
        $this->container['use_ranking'] = $use_ranking;

        return $this;
    }

    /**
     * Gets use_search
     *
     * @return bool
     */
    public function getUseSearch()
    {
        return $this->container['use_search'];
    }

    /**
     * Sets use_search
     *
     * @param bool $use_search If true, search will be executed for the query.
     *
     * @return $this
     */
    public function setUseSearch($use_search)
    {
        $this->container['use_search'] = $use_search;

        return $this;
    }

    /**
     * Gets use_semantic_enhancer
     *
     * @return bool
     */
    public function getUseSemanticEnhancer()
    {
        return $this->container['use_semantic_enhancer'];
    }

    /**
     * Sets use_semantic_enhancer
     *
     * @param bool $use_semantic_enhancer If true, the semantic enhancer will be used.
     *
     * @return $this
     */
    public function setUseSemanticEnhancer($use_semantic_enhancer)
    {
        $this->container['use_semantic_enhancer'] = $use_semantic_enhancer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
