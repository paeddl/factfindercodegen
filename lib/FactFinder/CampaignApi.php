<?php
/**
 * CampaignApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\FactFinder;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPageCampaignsUsingGET
     *
     * Get page campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $page_id Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CampaignsResult
     */
    public function getPageCampaignsUsingGET($channel, $page_id, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        list($response) = $this->getPageCampaignsUsingGETWithHttpInfo($channel, $page_id, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);
        return $response;
    }

    /**
     * Operation getPageCampaignsUsingGETWithHttpInfo
     *
     * Get page campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $page_id Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CampaignsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPageCampaignsUsingGETWithHttpInfo($channel, $page_id, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getPageCampaignsUsingGETRequest($channel, $page_id, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CampaignsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPageCampaignsUsingGETAsync
     *
     * Get page campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $page_id Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPageCampaignsUsingGETAsync($channel, $page_id, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        return $this->getPageCampaignsUsingGETAsyncWithHttpInfo($channel, $page_id, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPageCampaignsUsingGETAsyncWithHttpInfo
     *
     * Get page campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $page_id Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPageCampaignsUsingGETAsyncWithHttpInfo($channel, $page_id, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getPageCampaignsUsingGETRequest($channel, $page_id, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPageCampaignsUsingGET'
     *
     * @param  string $channel channel (required)
     * @param  string $page_id Use this parameter to pass a page ID for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPageCampaignsUsingGETRequest($channel, $page_id, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getPageCampaignsUsingGET'
            );
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null || (is_array($page_id) && count($page_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_id when calling getPageCampaignsUsingGET'
            );
        }

        $resourcePath = '/rest/v5/campaign/{channel}/page';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($exclude_products_not_in_range !== null) {
            $queryParams['excludeProductsNotInRange'] = ObjectSerializer::toQueryValue($exclude_products_not_in_range, null);
        }
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only, null);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude, 'double');
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude, 'double');
        }
        // query params
        if (is_array($market_id)) {
            $market_id = ObjectSerializer::serializeCollection($market_id, 'multi', true);
        }
        if ($market_id !== null) {
            $queryParams['marketId'] = ObjectSerializer::toQueryValue($market_id, null);
        }
        // query params
        if ($max_distance !== null) {
            $queryParams['maxDistance'] = ObjectSerializer::toQueryValue($max_distance, 'double');
        }
        // query params
        if ($page_id !== null) {
            $queryParams['pageId'] = ObjectSerializer::toQueryValue($page_id, null);
        }
        // query params
        if ($purchaser_id !== null) {
            $queryParams['purchaserId'] = ObjectSerializer::toQueryValue($purchaser_id, null);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductCampaignsUsingGET
     *
     * Get product campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  string $id_type Use this parameter to determine the type of ID passed to the method. Use &#x27;productNumber&#x27; if the given ID is from the field with &#x27;productNumber&#x27; role. Use &#x27;id&#x27; if it is from the field with &#x27;masterId&#x27; role. (optional, default to productNumber)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CampaignsResult
     */
    public function getProductCampaignsUsingGET($channel, $id, $exclude_products_not_in_range = null, $id_type = 'productNumber', $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        list($response) = $this->getProductCampaignsUsingGETWithHttpInfo($channel, $id, $exclude_products_not_in_range, $id_type, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);
        return $response;
    }

    /**
     * Operation getProductCampaignsUsingGETWithHttpInfo
     *
     * Get product campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  string $id_type Use this parameter to determine the type of ID passed to the method. Use &#x27;productNumber&#x27; if the given ID is from the field with &#x27;productNumber&#x27; role. Use &#x27;id&#x27; if it is from the field with &#x27;masterId&#x27; role. (optional, default to productNumber)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CampaignsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductCampaignsUsingGETWithHttpInfo($channel, $id, $exclude_products_not_in_range = null, $id_type = 'productNumber', $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getProductCampaignsUsingGETRequest($channel, $id, $exclude_products_not_in_range, $id_type, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CampaignsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductCampaignsUsingGETAsync
     *
     * Get product campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  string $id_type Use this parameter to determine the type of ID passed to the method. Use &#x27;productNumber&#x27; if the given ID is from the field with &#x27;productNumber&#x27; role. Use &#x27;id&#x27; if it is from the field with &#x27;masterId&#x27; role. (optional, default to productNumber)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductCampaignsUsingGETAsync($channel, $id, $exclude_products_not_in_range = null, $id_type = 'productNumber', $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        return $this->getProductCampaignsUsingGETAsyncWithHttpInfo($channel, $id, $exclude_products_not_in_range, $id_type, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductCampaignsUsingGETAsyncWithHttpInfo
     *
     * Get product campaigns
     *
     * @param  string $channel channel (required)
     * @param  string $id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  string $id_type Use this parameter to determine the type of ID passed to the method. Use &#x27;productNumber&#x27; if the given ID is from the field with &#x27;productNumber&#x27; role. Use &#x27;id&#x27; if it is from the field with &#x27;masterId&#x27; role. (optional, default to productNumber)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductCampaignsUsingGETAsyncWithHttpInfo($channel, $id, $exclude_products_not_in_range = null, $id_type = 'productNumber', $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getProductCampaignsUsingGETRequest($channel, $id, $exclude_products_not_in_range, $id_type, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductCampaignsUsingGET'
     *
     * @param  string $channel channel (required)
     * @param  string $id Use this parameter to pass a ID (master or product) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  string $id_type Use this parameter to determine the type of ID passed to the method. Use &#x27;productNumber&#x27; if the given ID is from the field with &#x27;productNumber&#x27; role. Use &#x27;id&#x27; if it is from the field with &#x27;masterId&#x27; role. (optional, default to productNumber)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductCampaignsUsingGETRequest($channel, $id, $exclude_products_not_in_range = null, $id_type = 'productNumber', $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getProductCampaignsUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProductCampaignsUsingGET'
            );
        }

        $resourcePath = '/rest/v5/campaign/{channel}/product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($exclude_products_not_in_range !== null) {
            $queryParams['excludeProductsNotInRange'] = ObjectSerializer::toQueryValue($exclude_products_not_in_range, null);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($id_type !== null) {
            $queryParams['idType'] = ObjectSerializer::toQueryValue($id_type, null);
        }
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only, null);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude, 'double');
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude, 'double');
        }
        // query params
        if (is_array($market_id)) {
            $market_id = ObjectSerializer::serializeCollection($market_id, 'multi', true);
        }
        if ($market_id !== null) {
            $queryParams['marketId'] = ObjectSerializer::toQueryValue($market_id, null);
        }
        // query params
        if ($max_distance !== null) {
            $queryParams['maxDistance'] = ObjectSerializer::toQueryValue($max_distance, 'double');
        }
        // query params
        if ($purchaser_id !== null) {
            $queryParams['purchaserId'] = ObjectSerializer::toQueryValue($purchaser_id, null);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShoppingCartCampaignsUsingGET
     *
     * Get shopping cart campaigns
     *
     * @param  string $channel channel (required)
     * @param  string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CampaignsResult
     */
    public function getShoppingCartCampaignsUsingGET($channel, $product_number, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        list($response) = $this->getShoppingCartCampaignsUsingGETWithHttpInfo($channel, $product_number, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);
        return $response;
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETWithHttpInfo
     *
     * Get shopping cart campaigns
     *
     * @param  string $channel channel (required)
     * @param  string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CampaignsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShoppingCartCampaignsUsingGETWithHttpInfo($channel, $product_number, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CampaignsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETAsync
     *
     * Get shopping cart campaigns
     *
     * @param  string $channel channel (required)
     * @param  string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShoppingCartCampaignsUsingGETAsync($channel, $product_number, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        return $this->getShoppingCartCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShoppingCartCampaignsUsingGETAsyncWithHttpInfo
     *
     * Get shopping cart campaigns
     *
     * @param  string $channel channel (required)
     * @param  string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShoppingCartCampaignsUsingGETAsyncWithHttpInfo($channel, $product_number, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        $returnType = '\Swagger\Client\Model\CampaignsResult';
        $request = $this->getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $exclude_products_not_in_range, $ids_only, $latitude, $longitude, $market_id, $max_distance, $purchaser_id, $sid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShoppingCartCampaignsUsingGET'
     *
     * @param  string $channel channel (required)
     * @param  string[] $product_number Use this parameter to pass product ID(s) for which you wish to obtain campaigns. (required)
     * @param  bool $exclude_products_not_in_range Use this parameter to override the geo setting \&quot;exclude products not in range\&quot; for this request. (optional)
     * @param  bool $ids_only If the value true is passed, then only the record IDs will be returned, streamlining the results. Additionally, if the Geo module is enabled, the IDs of all markets the product is mapped to will be also included. If you do not need the other information in the results, this will help you to improve performance. (optional, default to false)
     * @param  double $latitude The latitude coordinate of the current location. (optional)
     * @param  double $longitude The longitude coordinate of the current location. (optional)
     * @param  string[] $market_id Currently selected markets (optional)
     * @param  double $max_distance Use this parameter to override the geo setting \&quot;maximum distance\&quot; for this request. (optional)
     * @param  string $purchaser_id Use this parameter to pass the purchaser ID. This ID is only needed, if the &#x27;customer specific pricing&#x27; module is active. Otherwise it will be ignored. (optional)
     * @param  string $sid This parameter is used to pass an id for the user session. This is important for recognising the user, if you want to trigger personalised campaigns, as well as for FACT-Finder tracking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShoppingCartCampaignsUsingGETRequest($channel, $product_number, $exclude_products_not_in_range = null, $ids_only = 'false', $latitude = null, $longitude = null, $market_id = null, $max_distance = null, $purchaser_id = null, $sid = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getShoppingCartCampaignsUsingGET'
            );
        }
        // verify the required parameter 'product_number' is set
        if ($product_number === null || (is_array($product_number) && count($product_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_number when calling getShoppingCartCampaignsUsingGET'
            );
        }

        $resourcePath = '/rest/v5/campaign/{channel}/shoppingcart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($exclude_products_not_in_range !== null) {
            $queryParams['excludeProductsNotInRange'] = ObjectSerializer::toQueryValue($exclude_products_not_in_range, null);
        }
        // query params
        if ($ids_only !== null) {
            $queryParams['idsOnly'] = ObjectSerializer::toQueryValue($ids_only, null);
        }
        // query params
        if ($latitude !== null) {
            $queryParams['latitude'] = ObjectSerializer::toQueryValue($latitude, 'double');
        }
        // query params
        if ($longitude !== null) {
            $queryParams['longitude'] = ObjectSerializer::toQueryValue($longitude, 'double');
        }
        // query params
        if (is_array($market_id)) {
            $market_id = ObjectSerializer::serializeCollection($market_id, 'multi', true);
        }
        if ($market_id !== null) {
            $queryParams['marketId'] = ObjectSerializer::toQueryValue($market_id, null);
        }
        // query params
        if ($max_distance !== null) {
            $queryParams['maxDistance'] = ObjectSerializer::toQueryValue($max_distance, 'double');
        }
        // query params
        if (is_array($product_number)) {
            $product_number = ObjectSerializer::serializeCollection($product_number, 'multi', true);
        }
        if ($product_number !== null) {
            $queryParams['productNumber'] = ObjectSerializer::toQueryValue($product_number, null);
        }
        // query params
        if ($purchaser_id !== null) {
            $queryParams['purchaserId'] = ObjectSerializer::toQueryValue($purchaser_id, null);
        }
        // query params
        if ($sid !== null) {
            $queryParams['sid'] = ObjectSerializer::toQueryValue($sid, null);
        }

        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
