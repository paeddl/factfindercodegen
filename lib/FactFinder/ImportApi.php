<?php
/**
 * ImportApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FACT-Finder REST-API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\FactFinder;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ImportApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation isImportRunningUsingGET
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param  string[] $channel channel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function isImportRunningUsingGET($channel)
    {
        list($response) = $this->isImportRunningUsingGETWithHttpInfo($channel);
        return $response;
    }

    /**
     * Operation isImportRunningUsingGETWithHttpInfo
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param  string[] $channel channel (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function isImportRunningUsingGETWithHttpInfo($channel)
    {
        $returnType = 'bool';
        $request = $this->isImportRunningUsingGETRequest($channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation isImportRunningUsingGETAsync
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param  string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function isImportRunningUsingGETAsync($channel)
    {
        return $this->isImportRunningUsingGETAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation isImportRunningUsingGETAsyncWithHttpInfo
     *
     * Check if an import is running in any of the supplied channels
     *
     * @param  string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function isImportRunningUsingGETAsyncWithHttpInfo($channel)
    {
        $returnType = 'bool';
        $request = $this->isImportRunningUsingGETRequest($channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'isImportRunningUsingGET'
     *
     * @param  string[] $channel channel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function isImportRunningUsingGETRequest($channel)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling isImportRunningUsingGET'
            );
        }

        $resourcePath = '/rest/v5/import/running';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshRecommendationDatabasesUsingPOST
     *
     * Refresh recommendation databases
     *
     * @param  string[] $channel channel (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refreshRecommendationDatabasesUsingPOST($channel = null)
    {
        $this->refreshRecommendationDatabasesUsingPOSTWithHttpInfo($channel);
    }

    /**
     * Operation refreshRecommendationDatabasesUsingPOSTWithHttpInfo
     *
     * Refresh recommendation databases
     *
     * @param  string[] $channel channel (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshRecommendationDatabasesUsingPOSTWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->refreshRecommendationDatabasesUsingPOSTRequest($channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refreshRecommendationDatabasesUsingPOSTAsync
     *
     * Refresh recommendation databases
     *
     * @param  string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshRecommendationDatabasesUsingPOSTAsync($channel = null)
    {
        return $this->refreshRecommendationDatabasesUsingPOSTAsyncWithHttpInfo($channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshRecommendationDatabasesUsingPOSTAsyncWithHttpInfo
     *
     * Refresh recommendation databases
     *
     * @param  string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshRecommendationDatabasesUsingPOSTAsyncWithHttpInfo($channel = null)
    {
        $returnType = '';
        $request = $this->refreshRecommendationDatabasesUsingPOSTRequest($channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshRecommendationDatabasesUsingPOST'
     *
     * @param  string[] $channel channel (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refreshRecommendationDatabasesUsingPOSTRequest($channel = null)
    {

        $resourcePath = '/rest/v5/import/refreshRecommendations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startCustomerSpecificPricingImportUsingPOST
     *
     * Start customer specific pricing import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startCustomerSpecificPricingImportUsingPOST($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        list($response) = $this->startCustomerSpecificPricingImportUsingPOSTWithHttpInfo($cache_flush, $channel, $download, $import_stage, $quiet);
        return $response;
    }

    /**
     * Operation startCustomerSpecificPricingImportUsingPOSTWithHttpInfo
     *
     * Start customer specific pricing import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startCustomerSpecificPricingImportUsingPOSTWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startCustomerSpecificPricingImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startCustomerSpecificPricingImportUsingPOSTAsync
     *
     * Start customer specific pricing import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startCustomerSpecificPricingImportUsingPOSTAsync($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        return $this->startCustomerSpecificPricingImportUsingPOSTAsyncWithHttpInfo($cache_flush, $channel, $download, $import_stage, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startCustomerSpecificPricingImportUsingPOSTAsyncWithHttpInfo
     *
     * Start customer specific pricing import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startCustomerSpecificPricingImportUsingPOSTAsyncWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startCustomerSpecificPricingImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startCustomerSpecificPricingImportUsingPOST'
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startCustomerSpecificPricingImportUsingPOSTRequest($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/customerprices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cache_flush !== null) {
            $queryParams['cacheFlush'] = ObjectSerializer::toQueryValue($cache_flush, null);
        }
        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download, null);
        }
        // query params
        if ($import_stage !== null) {
            $queryParams['importStage'] = ObjectSerializer::toQueryValue($import_stage, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startGeoImportUsingPOST
     *
     * Start geo import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startGeoImportUsingPOST($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        list($response) = $this->startGeoImportUsingPOSTWithHttpInfo($cache_flush, $channel, $download, $import_stage, $quiet);
        return $response;
    }

    /**
     * Operation startGeoImportUsingPOSTWithHttpInfo
     *
     * Start geo import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startGeoImportUsingPOSTWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startGeoImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startGeoImportUsingPOSTAsync
     *
     * Start geo import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startGeoImportUsingPOSTAsync($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        return $this->startGeoImportUsingPOSTAsyncWithHttpInfo($cache_flush, $channel, $download, $import_stage, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startGeoImportUsingPOSTAsyncWithHttpInfo
     *
     * Start geo import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startGeoImportUsingPOSTAsyncWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startGeoImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startGeoImportUsingPOST'
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startGeoImportUsingPOSTRequest($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/geo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cache_flush !== null) {
            $queryParams['cacheFlush'] = ObjectSerializer::toQueryValue($cache_flush, null);
        }
        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download, null);
        }
        // query params
        if ($import_stage !== null) {
            $queryParams['importStage'] = ObjectSerializer::toQueryValue($import_stage, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startRankingImportUsingPOST
     *
     * Start ranking import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startRankingImportUsingPOST($cache_flush = 'false', $channel = null, $quiet = 'false')
    {
        list($response) = $this->startRankingImportUsingPOSTWithHttpInfo($cache_flush, $channel, $quiet);
        return $response;
    }

    /**
     * Operation startRankingImportUsingPOSTWithHttpInfo
     *
     * Start ranking import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startRankingImportUsingPOSTWithHttpInfo($cache_flush = 'false', $channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startRankingImportUsingPOSTRequest($cache_flush, $channel, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startRankingImportUsingPOSTAsync
     *
     * Start ranking import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startRankingImportUsingPOSTAsync($cache_flush = 'false', $channel = null, $quiet = 'false')
    {
        return $this->startRankingImportUsingPOSTAsyncWithHttpInfo($cache_flush, $channel, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startRankingImportUsingPOSTAsyncWithHttpInfo
     *
     * Start ranking import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startRankingImportUsingPOSTAsyncWithHttpInfo($cache_flush = 'false', $channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startRankingImportUsingPOSTRequest($cache_flush, $channel, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startRankingImportUsingPOST'
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startRankingImportUsingPOSTRequest($cache_flush = 'false', $channel = null, $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/ranking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cache_flush !== null) {
            $queryParams['cacheFlush'] = ObjectSerializer::toQueryValue($cache_flush, null);
        }
        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startRecommendationImportUsingPOST
     *
     * Start recommendation import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startRecommendationImportUsingPOST($channel = null, $quiet = 'false')
    {
        list($response) = $this->startRecommendationImportUsingPOSTWithHttpInfo($channel, $quiet);
        return $response;
    }

    /**
     * Operation startRecommendationImportUsingPOSTWithHttpInfo
     *
     * Start recommendation import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startRecommendationImportUsingPOSTWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startRecommendationImportUsingPOSTRequest($channel, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startRecommendationImportUsingPOSTAsync
     *
     * Start recommendation import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startRecommendationImportUsingPOSTAsync($channel = null, $quiet = 'false')
    {
        return $this->startRecommendationImportUsingPOSTAsyncWithHttpInfo($channel, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startRecommendationImportUsingPOSTAsyncWithHttpInfo
     *
     * Start recommendation import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startRecommendationImportUsingPOSTAsyncWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startRecommendationImportUsingPOSTRequest($channel, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startRecommendationImportUsingPOST'
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startRecommendationImportUsingPOSTRequest($channel = null, $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/recommendation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startSearchImportUsingPOST
     *
     * Start search import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $include_customer_prices if true: executes a customer specific pricing import after the search import. If customer specific pricing is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $include_geo if true: executes a geo import after the search import. If the geo module is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startSearchImportUsingPOST($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $include_customer_prices = 'false', $include_geo = 'false', $quiet = 'false')
    {
        list($response) = $this->startSearchImportUsingPOSTWithHttpInfo($cache_flush, $channel, $download, $import_stage, $include_customer_prices, $include_geo, $quiet);
        return $response;
    }

    /**
     * Operation startSearchImportUsingPOSTWithHttpInfo
     *
     * Start search import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $include_customer_prices if true: executes a customer specific pricing import after the search import. If customer specific pricing is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $include_geo if true: executes a geo import after the search import. If the geo module is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startSearchImportUsingPOSTWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $include_customer_prices = 'false', $include_geo = 'false', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startSearchImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $include_customer_prices, $include_geo, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startSearchImportUsingPOSTAsync
     *
     * Start search import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $include_customer_prices if true: executes a customer specific pricing import after the search import. If customer specific pricing is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $include_geo if true: executes a geo import after the search import. If the geo module is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startSearchImportUsingPOSTAsync($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $include_customer_prices = 'false', $include_geo = 'false', $quiet = 'false')
    {
        return $this->startSearchImportUsingPOSTAsyncWithHttpInfo($cache_flush, $channel, $download, $import_stage, $include_customer_prices, $include_geo, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startSearchImportUsingPOSTAsyncWithHttpInfo
     *
     * Start search import
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $include_customer_prices if true: executes a customer specific pricing import after the search import. If customer specific pricing is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $include_geo if true: executes a geo import after the search import. If the geo module is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startSearchImportUsingPOSTAsyncWithHttpInfo($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $include_customer_prices = 'false', $include_geo = 'false', $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startSearchImportUsingPOSTRequest($cache_flush, $channel, $download, $import_stage, $include_customer_prices, $include_geo, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startSearchImportUsingPOST'
     *
     * @param  bool $cache_flush if true: causes a cache flush after a channel has been imported (optional, default to false)
     * @param  string[] $channel channel (optional)
     * @param  bool $download if true: causes the import file to be updated first. If no URL is stored in the FACT-Finder configuration, this parameter has no effect. (optional, default to false)
     * @param  string $import_stage IMPORT_ONLY only fills the intermediate DB, LOAD_ONLY imports that database into memory, and FULL combines both stages (optional, default to FULL)
     * @param  bool $include_customer_prices if true: executes a customer specific pricing import after the search import. If customer specific pricing is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $include_geo if true: executes a geo import after the search import. If the geo module is not enabled for a given channel, this parameter has no effect. (optional, default to false)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startSearchImportUsingPOSTRequest($cache_flush = 'false', $channel = null, $download = 'false', $import_stage = 'FULL', $include_customer_prices = 'false', $include_geo = 'false', $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cache_flush !== null) {
            $queryParams['cacheFlush'] = ObjectSerializer::toQueryValue($cache_flush, null);
        }
        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download, null);
        }
        // query params
        if ($import_stage !== null) {
            $queryParams['importStage'] = ObjectSerializer::toQueryValue($import_stage, null);
        }
        // query params
        if ($include_customer_prices !== null) {
            $queryParams['includeCustomerPrices'] = ObjectSerializer::toQueryValue($include_customer_prices, null);
        }
        // query params
        if ($include_geo !== null) {
            $queryParams['includeGeo'] = ObjectSerializer::toQueryValue($include_geo, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startSuggestImportUsingPOST
     *
     * Start suggest import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ImportChannelResult[]
     */
    public function startSuggestImportUsingPOST($channel = null, $quiet = 'false')
    {
        list($response) = $this->startSuggestImportUsingPOSTWithHttpInfo($channel, $quiet);
        return $response;
    }

    /**
     * Operation startSuggestImportUsingPOSTWithHttpInfo
     *
     * Start suggest import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ImportChannelResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function startSuggestImportUsingPOSTWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startSuggestImportUsingPOSTRequest($channel, $quiet);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ImportChannelResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startSuggestImportUsingPOSTAsync
     *
     * Start suggest import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startSuggestImportUsingPOSTAsync($channel = null, $quiet = 'false')
    {
        return $this->startSuggestImportUsingPOSTAsyncWithHttpInfo($channel, $quiet)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startSuggestImportUsingPOSTAsyncWithHttpInfo
     *
     * Start suggest import
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startSuggestImportUsingPOSTAsyncWithHttpInfo($channel = null, $quiet = 'false')
    {
        $returnType = '\Swagger\Client\Model\ImportChannelResult[]';
        $request = $this->startSuggestImportUsingPOSTRequest($channel, $quiet);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startSuggestImportUsingPOST'
     *
     * @param  string[] $channel channel (optional)
     * @param  bool $quiet if true: only receive a filled response if an error occurs during the import otherwise the response is just empty (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startSuggestImportUsingPOSTRequest($channel = null, $quiet = 'false')
    {

        $resourcePath = '/rest/v5/import/suggest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($channel)) {
            $channel = ObjectSerializer::serializeCollection($channel, 'multi', true);
        }
        if ($channel !== null) {
            $queryParams['channel'] = ObjectSerializer::toQueryValue($channel, null);
        }
        // query params
        if ($quiet !== null) {
            $queryParams['quiet'] = ObjectSerializer::toQueryValue($quiet, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
